name: Rust

# Contains checks:
# - That the code compiles
# - That the code complies with formatting
# - Lints (using clippy) to find errors
# - That crates that are published are publish-able (works most of the time)
# - Testing 
#   - Standard Rust integration and unit tests
#   - Fuzz tests (parser and checker)
#   - WASM edition works tests

on:
  push:
    branches: [main]
  pull_request:
    branches: ['*']

env:
  CARGO_TERM_COLOR: always
  CACHE_PATHS: |
    ~/.cargo/bin/
    ~/.cargo/registry/index/
    ~/.cargo/registry/cache/
    ~/.cargo/git/db/
    target/
    checker/fuzz/target
    parser/fuzz/target

jobs:
  validity:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable

      - uses: actions/cache@v4
        with:
          path: ${{ env.CACHE_PATHS }}
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Check source is valid
        run: cargo check --workspace

      - name: Check binary
        run: cargo check --bin ezno
      
  formating:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable

      - name: Check Rust formatting with rustfmt
        run: cargo fmt --all --check

      - uses: kaleidawave/release-downloader@improvements
        with:
          items: kaleidawave/simple-toml-parser@canary[format]

      - name: Check 'Cargo.toml' formatting
        run: format Cargo.toml --check

  tests:
    needs: validity
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: actions/cache@v4
        with:
          path: ${{ env.CACHE_PATHS }}
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install spectra
        uses: kaleidawave/release-downloader@improvements
        with:
          items: kaleidawave/experiments[spectra]

      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            parser:
              - 'parser/**'
            checker:
              - 'checker/**'

      - name: Run parser tests
        if: steps.changes.outputs.parser == 'true' || github.ref_name == 'main'
        run: cargo test --no-fail-fast
        working-directory: parser

      - name: Run parser examples
        if: steps.changes.outputs.parser == 'true' || github.ref_name == 'main'
        run: |
          CORPUS_URL="https://gist.githubusercontent.com/kaleidawave/6708f604bc403021b56cb54ea50cac62/raw/javascript_files.txt"

          curl -s "$CORPUS_URL" | while IFS= read -r URL; do
              FILENAME="${URL##*/}"
              curl -s "$URL" > $FILENAME
              cargo run -p ezno-parser --example parse $FILENAME
          done
        working-directory: parser

      - name: Run checker tests
        if: steps.changes.outputs.checker == 'true' || github.ref_name == 'main'
        run: cargo test -p ezno-checker

      - name: Run checker tests
        if: steps.changes.outputs.checker == 'true' || github.ref_name == 'main'
        run: spectra test specification/specification.md 'cargo run --example runner -- --interactive --rpc' --lists-as-expected
        working-directory: checker

      - name: Run CLI and base tests
        run: cargo test

  extras:
    runs-on: ubuntu-latest
    needs: validity
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable

      - uses: actions/cache@v4
        with:
          path: ${{ env.CACHE_PATHS }}
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - uses: actions/setup-node@v4
        with:
          node-version: 23
     
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            src:
              - 'src/**'
            parser:
              - 'parser/**'
            checker:
              - 'checker/**'
      
      - name: Check parser without extras
        if: steps.changes.outputs.parser == 'true'
        # TODO want `continue-on-error: true` but doesn't report error
        run: cargo check -p ezno-parser --no-default-features

      - name: Check parser generator
        if: steps.changes.outputs.parser == 'true'
        # TODO want `continue-on-error: true` but doesn't report error
        run: cargo test -p ezno-ast-generator

      - name: Check checker without default features
        if: steps.changes.outputs.checker == 'true'
        # TODO want `continue-on-error: true` but doesn't report error
        run: cargo check -p ezno-checker --no-default-features

      - name: Build and test WASM
        if: github.ref_name == 'main' || !github.event.pull_request.draft
        timeout-minutes: 5
        run: |
          # TODO `cargo check --target wasm32-unknown-unknown --lib` might be good enough

          rustup target add wasm32-unknown-unknown
          npm ci
          npm run build

          node ./dist/cli.cjs info
          deno run -A ./dist/cli.mjs info

          npm run run-tests

          npx -p typescript tsc --strict --pretty ./build/ezno_lib.d.ts
          echo "debug checked with TSC"
          cargo run -p ezno-parser --example parse ./build/ezno_lib.d.ts --type-definition-module
          
          # TODO temp as the types generated can be a bit unpredicatible
          if ${{ contains(fromJSON('["main", "ast-typegen-direct"]'), github.ref_name ) }}; then
            npm run build-release
            npx -p typescript tsc --strict --pretty ./build/ezno_lib.d.ts
          fi
        working-directory: src/js-cli-and-library
        shell: bash

      # WIP
      - uses: actions/upload-artifact@v4
        if: steps.changes.outputs.src == 'true' || github.ref_name == 'main'
        with:
          name: wasm-build
          overwrite: true
          path: src/js-cli-and-library/dist
          retention-days: 90

  fuzzing_parser:
    if: ${{ github.ref == 'main' || !github.event.pull_request.draft || contains(github.event.pull_request.labels.*.name, 'fuzz-me') }}
    needs: validity
    runs-on: ubuntu-latest
    timeout-minutes: 15
    continue-on-error: true
    strategy:
      matrix:
        fuzz-target: [module_roundtrip_naive, module_roundtrip_structured]

    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@nightly
      - uses: actions/cache@v4
        with:
          path: ${{ env.CACHE_PATHS }}
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Install cargo-fuzz
        uses: kaleidawave/release-downloader@improvements
        with:
          items: rust-fuzz/cargo-fuzz@0.13.1
          
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            parser:
              - 'parser/**'
      
      - name: Run fuzzing
        env:
          SHORT_CIRCUIT: true
        if: steps.changes.outputs.parser == 'true'
        run: |
          CARGO_TARGET_DIR=../../target cargo fuzz run -s none ${{ matrix.fuzz-target }} -- -timeout=10 -use_value_profile=1 -max_total_time=120

          # if ${{ env.SHORT_CIRCUIT }}; then
          # else
          #   CARGO_TARGET_DIR=../../target cargo fuzz run -s none ${{ matrix.fuzz-target }} -- -timeout=10 -use_value_profile=1 -max_total_time=300 -fork=1 -ignore_crashes=1
            
          #   if test -d fuzz/artifacts; then 
          #     find fuzz/artifacts -type f -print -exec xxd {} \; -exec cargo fuzz fmt -s none module_roundtrip_structured {} \;; false; 
          #   fi
          # fi
        working-directory: parser/fuzz

  fuzzing_checker:
    if: ${{ github.ref == 'main' || !github.event.pull_request.draft || contains(github.event.pull_request.labels.*.name, 'fuzz-me') }}
    needs: validity

    runs-on: ubuntu-latest

    timeout-minutes: 15

    # TODO
    continue-on-error: true

    strategy:
      matrix:
        fuzz-target: [check_project_naive]

    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@nightly
      - uses: actions/cache@v4
        with:
          path: ${{ env.CACHE_PATHS }}
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install cargo-fuzz
        uses: kaleidawave/release-downloader@improvements
        with:
          items: rust-fuzz/cargo-fuzz@0.13.1

      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            checker:
              - 'checker/**'

      - name: Run fuzzing
        env:
          SHORT_CIRCUIT: true
        if: steps.changes.outputs.checker == 'true'
        run: cargo fuzz run -s none ${{ matrix.fuzz-target }} -- -timeout=10 -use_value_profile=1 -max_total_time=120
        working-directory: checker/fuzz
  
  clippy:
    needs: validity
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: actions/cache@v4
        with:
          path: ${{ env.CACHE_PATHS }}
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Lint code with clippy
        run: cargo clippy

  # work_in_progress:
  #   needs: validity
  #   runs-on: ubuntu-latest
  #   if: github.ref_name != 'main' && !github.event.pull_request.draft
  #   timeout-minutes: 30
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: brndnmtthws/rust-action-cargo-binstall@v1
  #       with:
  #         packages: ripgrep
  #     - name: Check for TODO comments
  #       # TODO can we label these somehow?
  #       run: | 
  #         rg '(TODO|todo\!|#\[ignore\]|dbg\!)'

  publish-ability:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable

      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            manifests:
              - '**/*.toml'

      - uses: kaleidawave/release-downloader@improvements
        if: steps.changes.outputs.manifests == 'true'
        with:
          items: kaleidawave/crates-release-gh-action@assets[crates-release]
          
      - name: Check that it will publish to crates.io
        if: steps.changes.outputs.manifests == 'true'
        run: crates-release verify

  performance-and-size:
    runs-on: ubuntu-latest
    needs: validity
    steps:
      - name: Kick off other workflow if the PR has a label
        if: github.ref_name == 'main' || contains(github.event.pull_request.labels.*.name, 'compiler-performance')
        run: gh workflow run performance-and-size.yml --ref "${{ github.head_ref }}"
        env:
          GH_TOKEN: ${{ github.token }}
