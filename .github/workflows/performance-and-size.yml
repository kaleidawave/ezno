name: Performance and size

on:
  workflow_dispatch:
    inputs:
      paths: 
        default: "[]"
        type: string
        description: Some binaries to build and compare with

env:
  CARGO_TERM_COLOR: always

jobs:
  TEMP:
    runs-on: ubuntu-latest
    if: false

    strategy:
      matrix: 
        ref: ${{ fromJson(inputs.paths) }} 
      fail-fast: true

    steps:
    - uses: actions/checkout@v4
      id: checkout
      with:
        ref: ${{ matrix.ref }}
    - uses: dtolnay/rust-toolchain@stable
    
    - name: Build binary
      run: cargo build --release
      shell: bash

    - uses: actions/upload-artifact@v4
      with:
        name: binary-${{ runner.os }}${{ runner.arch }}-TEMP-${{ matrix.ref }}
        path: target/release/ezno
        retention-days: 30

  run-benchmarks:
    runs-on: ubuntu-latest
    needs: TEMP
    if: ${{ always() }}

    env:
      GH_TOKEN: ${{ github.token }}

    steps:
      - id: checkout
        uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - uses: kaleidawave/release-downloader@improvements
        with:
          # TODO benchmark tool
          items: kaleidawave/experiments@assets[shell-language|spectra|sde],sharkdp/hyperfine@v1.19.0

      - name: Install valgrind
        id: install-valgrind
        continue-on-error: true
        run: sudo apt-get install valgrind

      # TODO is there a way to cache this?
      - name: Build latest version of demo.tsx
        run: |
          curl https://gist.githubusercontent.com/kaleidawave/81066f322ed574b3373e27770137013f/raw/b04dcc0bc60e6331008bdd578b98224cc07d5d42/all.tsx > demo.tsx

          # TODO temp
          cat demo.tsx

          # in the future
          # spectra list checker/specification/specification.md --cases-with-splitter '~~~' > total.ts 
          # cargo update derive-enum-from-into
          # cargo run -p ezno-parser --example combine_blocks total.ts --out demo.tsx

      # get other binaries and last

      - name: Create 'binaries' folder
        continue-on-error: true
        run: mkdir -p binaries

      - name: Get binaries to compare against
        id: download-binaries
        continue-on-error: true
        run: gh run download -p "binary-*" -D binaries

      - name: Build latest version of binary
        shell: shell-language {0}
        run: |
          echo run cargo build --release
          copy target/release/ezno binaries/latest/ezno

      # start of performance

      - name: Compare checker performance
        shell: shell-language {0}
        run: |
          # Ensure binaries are executable
          ee binaries
          
          let to = env GITHUB_STEP_SUMMARY

          let binaries = files "binaries/**/*" then replace "\n" ","
          echo "Found $binaries"

          let output = run hyperfine -N -i -L binary $binaries './{binary} check demo.tsx'

          append $to "### Checking `demo.tsx`\n"
          append $to "```shell\n$output\n```"

      - name: Print input
        if: false
        shell: shell-language {0}
        run: |
          let to = env GITHUB_STEP_SUMMARY
          let content = read ./demo.tsx

          append $to "<details><summary>Input</summary>\n"
          append $to "```tsx\n$content\n```\n</details>"
          
      - name: Print diagnostics and statistics
        id: performance
        continue-on-error: true
        shell: shell-language {0}
        run: |
          let to = env GITHUB_STEP_SUMMARY
          append $to "#### check demo.tsx"
          for files "binaries/**/*" each
            let out = run "./$file" check demo.tsx --timings --max-diagnostics all --merge-stdout-and-stderr

            let diagnostics = rbefore $out "---" then trim
            let statistics = rafter $out "---" then trim

            # append $to "<details><summary>Diagnostics</summary>\n"
            # append $to "```\n$diagnostics\n```\n</details>\n"

            append $to "\n<details><summary>Statistics for $file check demo.tsx</summary>\n"
            append $to "```\n$statistics\n```\n</details>\n"

      - name: Run checker performance on large file
        shell: shell-language {0}
        run: |
          let to = env GITHUB_STEP_SUMMARY
          let large = read "./demo.tsx" then repeat 10
          write "./large.tsx" $large

          let binaries = files "binaries/**/*"
          set binaries = replace $binaries "\n" ","

          append $to "#### check large.tsx"
          let output = run hyperfine -N -i -L binary $binaries './{binary} check large.tsx'
          append $to "```shell\n$output\n```\n"

          for files "binaries/**/*" each
            let out = run "./$file" check large.tsx --timings --merge-stdout-and-stderr
            append $to "<details><summary>Statistics for $file check large.tsx</summary>\n"
          
            let statistics = rafter $out "---" then trim
            append $to "```\n$statistics\n```\n"

          append $to "</details>\n"
          
          # echo run hyperfine -N -i -L binary $binaries './{binary} check large.tsx' --export-markdown out.md
          # read out.md then append $to $piped

      - name: Valgrind and Callgrind statistics
        shell: shell-language {0}
        if: ${{ steps.install-valgrind.outcome == 'success' }}
        continue-on-error: true
        run: |
          let to = env GITHUB_STEP_SUMMARY
          append $to "#### Instructions and memory usage for `check demo.tsx`"

          for files "binaries/**/*" each
            let output = run valgrind $file check ./demo.tsx --merge-stdout-and-stderr
            let allocated = regexp $output "(?<bytes>[\\d,]+) bytes allocated" extract bytes
            let allocated = replace $allocated "," "" then format_number

            let output = run valgrind --tool=callgrind $file check ./demo.tsx --merge-stdout-and-stderr
            let instructions = regexp $output "Collected : (?<name>\\d+?)\\b" extract name then format_number

            append $to "- `$file`: `$allocated` bytes allocated and `$instructions` instructions\n"

      # SDE
      - name: Setup SDE binaries
        uses: petarpetrovt/setup-sde@v3.0
        with:
          environmentVariableName: SDE_PATH # default value is `SDE_PATH`
          sdeVersion: 9.58.0 # possible values: 9.58.0 (default), 9.33.0

      - name: path-fix
        run: echo "$SDE_PATH" >> $GITHUB_PATH

      - name: sde
        shell: shell-language {0}
        continue-on-error: true
        run: |
          let to = env GITHUB_STEP_SUMMARY
          append $to "#### SDE for `check demo.tsx`"

          for files "binaries/**/*" each
            let output = run sde-output-parser run --sort total --program "$file check ./demo.tsx"
            append $to "#### `$file`:\n\n```shell\n$output\n```"

      # final steps

      - name: Move binary
        shell: shell-language {0}
        run: copy target/release/ezno binaries/binary-${{ runner.os }}${{ runner.arch }}-${{ github.ref_name }}-last

      - name: Upload current binary
        uses: actions/upload-artifact@v4
        with:
          # TODO TEMP branch
          name: binary-${{ runner.os }}${{ runner.arch }}-${{ github.ref_name }}-last
          path: binaries/binary-${{ runner.os }}${{ runner.arch }}-${{ github.ref_name }}-last
          overwrite: true
          retention-days: 30
