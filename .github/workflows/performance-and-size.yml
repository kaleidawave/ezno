name: Performance and size

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  run-benchmarks:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          # I think this is okay
          # TODO can we do some sort of sparse checkout
          fetch-depth: 100 
      - uses: dtolnay/rust-toolchain@stable
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      # TODO abstract
      - name: Download shell-language
        run: |
          mkdir bin
          gh release download -R kaleidawave/experiments assets -p shell-language -D bin
          ls -R .
          chmod +x ./bin/shell-language
          echo "$(pwd)/bin" >> "$GITHUB_PATH"
        env:
          GH_TOKEN: ${{ github.token }}

      - uses: brndnmtthws/rust-action-cargo-binstall@v1
        with:
          packages: hyperfine

      - name: Install valgrind
        id: install-valgrind
        continue-on-error: true
        run: sudo apt-get install valgrind

      # TODO temp
      - name: List references and branches
        shell: shell-language {0}
        run: |
          let acc = constant ""
          for git log --format=%H each
            let branch = git name-rev --name-only --refs="refs/heads/*" $ref
            echo "$ref $branch"
            let branch = if_contains $branch "~" "" $branch
            let item = if_equal $branch "" "" "$branch->$ref"
            let acc = concatenate $acc $item
            set break = if_equal $branch "master" "break" ""

          for constant $acc each
            let branch = before $iter "->"
            let ref = after $iter "->"
            let name = replace $branch "/" "-"

            echo run git checkout $ref --force
            echo run git status
            echo "Building binary @$branch"
            echo run cargo build --release
            move ./target/release/ezno "binaries/ezno-$name"

      # THIS IS DONE ON THE LEAST REVISION
      # Code generated from specification.md. this is not meant to accurately represent a 
      # program but instead give an idea for how it scales across all the type checking features
      - name: Generate specification
        run: |
          # Generate a file which contains everything that the checker currently implements
          # It is intentional that this will be on main branch if it is comparing, because we 
          # do not want to include new tests

          cargo run -p ezno-checker-specification \
           --example amalgamate ./checker/specification/specification.md \
           --comment-headers \
           --out ./demo.tsx
        env:
          CARGO_PROFILE_RELEASE_DEBUG: true

      - name: Compare checker performance
        shell: shell-language {0}
        run: |
          let to = env GITHUB_STEP_SUMMARY
          let binaries = files "binaries/*"
          let binaries = replace $binaries "\n" ","

          append $to "### Checking\n"
          let output = run hyperfine -i -L binary $binaries './{binary} check demo.tsx'
          append $to "```shell\n$output\n```"

      - name: Print input
        shell: shell-language {0}
        run: |
          let to = env GITHUB_STEP_SUMMARY
          append $to "<details><summary>Input</summary>\n"
          let content = read ./demo.tsx
          append $to "```tsx\n$content\n```\n</details>"
          echo "::info::Wrote code to summary"
          
      - name: Test statistics
        id: performance
        continue-on-error: true
        shell: shell-language {0}
        run: |
          let to = env GITHUB_STEP_SUMMARY
          for files "binaries/*" each
            append $to "### $file (demo)"
            echo "Running $file"
            let out = run "./$file" check demo.tsx --timings --max-diagnostics all

            let diagnostics = rbefore $out "---"
            let statistics = rafter $out "---"

            append $to "<details><summary>Diagnostics</summary>\n```$diagnostics```\n</details>"
            append $to "<details><summary>Statistics</summary>\n```$statistics```\n</details>"

      - name: Run checker performance on large file
        shell: shell-language {0}
        run: |
          let demo = read "./demo.tsx"
          let large = repeat demo 10
          write "./large.tsx" $large

          let to = env GITHUB_STEP_SUMMARY
          for files "binaries/*" each
            append $to "### $file (large)"
            echo "Running $file"
            let out = run "./$file" check large.tsx --timings

            let statistics = rafter $out "---"
            append $to "<details><summary>Statistics</summary>\n```$statistics```\n</details>"
            
            let out = run hyperfine -i "./$file" check large.tsx
            append $to "```shell\n$out\n```"

      - name: Valgrind and callgrind
        shell: shell-language {0}
        if: ${{ steps.install-valgrind.outcome == 'success' }}
        continue-on-error: true
        run: |
          let to = env GITHUB_STEP_SUMMARY
          for files "binaries/*" each
            let output = run valgrind $file "./demo.tsx" --check --merge-stdout-and-stderr
            let allocated = regexp $output "(?<bytes>[\\d,]+) bytes allocated" extract bytes
            let allocated = replace $allocated "," ""
            let allocated = format_number $allocated
            append $to "- `$file`: `$allocated` allocated"

            let output = run valgrind --tool=callgrind $file "./demo.tsx" --check --merge-stdout-and-stderr
            let instructions = regexp $output "Collected : (?<name>\\d+?)\\b" extract name
            let instructions = format_number $instructions
            append $to "- `$file`: `$instructions` instructions"

      # - name: Run parsing & stringing (minfied) benchmarks
      #   shell: bash
      #   continue-on-error: true
      #   run: |
      #     CORPUS_URL="https://gist.githubusercontent.com/kaleidawave/6708f604bc403021b56cb54ea50cac62/raw/javascript_files.txt"

      #     curl -s "$CORPUS_URL" | while IFS= read -r URL; do
      #       FILENAME="${URL##*/}"
      #       curl -s "$URL" > $FILENAME
      #       echo "::group::Comparison"
      #       ${{ steps.compilers.outputs.BINARY }} ast-explorer full $FILENAME --check

      #       # hyperfine -i -L compiler ${{ steps.compilers.outputs.BINARIES }} \
      #       #   '{compiler} ast-explorer full $FILENAME --check'
            
      #       echo "::endgroup::"
      #     done
