name: Performance and size

on:
  push:
    branches: [main]
  workflow_dispatch:
  #   inputs:
  #     paths: 
  #       default: "[]"
  #       type: string
  #       description: Some binaries to build and compare with

env:
  CARGO_TERM_COLOR: always

jobs:
  TEMP:
    runs-on: ubuntu-latest
    if: false

    strategy:
      matrix: 
        # ref: ${{ fromJson(inputs.paths) }} 
        ref: [
          "35dbeb145150906ba91ec8582ebb38650f1c7d34",
          "506be8be8b6f1de2423ecab6413b31e3cb0ce58c"
        ]
      fail-fast: true

    steps:
    - uses: actions/checkout@v4
      id: checkout
      with:
        ref: ${{ matrix.ref }}
    - uses: dtolnay/rust-toolchain@stable
    
    - name: Build binary
      run: cargo build --release
      shell: bash

    - uses: actions/upload-artifact@v4
      with:
        name: binary-${{ runner.os }}${{ runner.arch }}-TEMP-${{ matrix.ref }}
        path: target/release/ezno
        retention-days: 30

  run-benchmarks:
    runs-on: ubuntu-latest
    needs: TEMP
    if: ${{ always() }}

    env:
      GH_TOKEN: ${{ github.token }}

    steps:
      - uses: actions/checkout@v4
        with:
          # TODO temp
          ref: general-fixes
      - uses: dtolnay/rust-toolchain@stable
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      # TODO extract
      - name: Download shell-language and spectra
        run: |
          mkdir bin
          gh release download -R kaleidawave/experiments assets -p shell-language -D bin
          gh release download -R kaleidawave/experiments assets -p spectra -D bin
          ls -R .
          chmod +x ./bin/shell-language
          chmod +x ./bin/spectra
          echo "$(pwd)/bin" >> "$GITHUB_PATH"

      - uses: brndnmtthws/rust-action-cargo-binstall@v1
        with:
          packages: hyperfine

      - name: Install valgrind
        id: install-valgrind
        continue-on-error: true
        run: sudo apt-get install valgrind

      # - name: Get latest version of demo.tsx
      #   uses: actions/download-artifact@v4
      #   continue-on-error: true
      #   id: download-demo-tsx
      #   with:
      #     name: specification-${{ github.ref_name }}

      # TODO is there a way to cache this?
      - name: Build latest version of demo.tsx
        # if: ${{ steps.download-demo-tsx.outcome == 'failure' }}
        run: |
          spectra concatenate-cases checker/specification/specification.md total.ts
          cargo run -p ezno-parser --example combine_blocks total.ts --out demo.tsx

      # get other binaries and last

      - name: Create 'binaries' folder
        continue-on-error: true
        run: mkdir -p binaries

      - name: Get binaries to compare against
        id: download-binaries
        continue-on-error: true
        run: gh run download -p "binary-*" -D binaries

      - name: Build latest version of binary
        shell: shell-language {0}
        run: |
          echo run cargo build --release
          copy target/release/ezno binaries/latest/ezno

      # start of performance

      - name: Compare checker performance
        shell: shell-language {0}
        run: |
          # Ensure binaries are executable
          ee binaries
          
          let to = env GITHUB_STEP_SUMMARY

          let binaries = files "binaries/**/*" then replace "\n" ","
          echo "Found $binaries"

          let output = run hyperfine -i -L binary $binaries './{binary} check demo.tsx'

          append $to "### Checking `demo.tsx`\n"
          append $to "```shell\n$output\n```"

      - name: Print input
        if: false
        shell: shell-language {0}
        run: |
          let to = env GITHUB_STEP_SUMMARY
          let content = read ./demo.tsx

          append $to "<details><summary>Input</summary>\n"
          append $to "```tsx\n$content\n```\n</details>"
          
      - name: Print diagnostics and statistics
        id: performance
        continue-on-error: true
        shell: shell-language {0}
        run: |
          let to = env GITHUB_STEP_SUMMARY
          append $to "#### check demo.tsx"
          for files "binaries/**/*" each
            let out = run "./$file" check demo.tsx --timings --max-diagnostics all --merge-stdout-and-stderr

            let diagnostics = rbefore $out "---" then trim
            let statistics = rafter $out "---" then trim

            # append $to "<details><summary>Diagnostics</summary>\n"
            # append $to "```\n$diagnostics\n```\n</details>\n"

            append $to "\n<details><summary>Statistics for $file check demo.tsx</summary>\n"
            append $to "```\n$statistics\n```\n</details>\n"

      - name: Run checker performance on large file
        shell: shell-language {0}
        run: |
          let to = env GITHUB_STEP_SUMMARY
          let large = read "./demo.tsx" then repeat 10
          write "./large.tsx" $large

          let binaries = files "binaries/**/*"
          set binaries = replace $binaries "\n" ","

          append $to "#### check large.tsx"
          let output = run hyperfine -i -L binary $binaries './{binary} check large.tsx'
          append $to "```shell\n$output\n```\n"

          for files "binaries/**/*" each
            let out = run "./$file" check large.tsx --timings --merge-stdout-and-stderr
            append $to "<details><summary>Statistics for $file check large.tsx</summary>\n"
          
            let statistics = rafter $out "---" then trim
            append $to "```\n$statistics\n```\n"

          append $to "</details>\n"
          
          # echo run hyperfine -i -L binary $binaries './{binary} check large.tsx' --export-markdown out.md
          # read out.md then append $to $piped

      - name: Valgrind and Callgrind statistics
        shell: shell-language {0}
        if: ${{ steps.install-valgrind.outcome == 'success' }}
        continue-on-error: true
        run: |
          let to = env GITHUB_STEP_SUMMARY
          append $to "#### Instructions and memory usage for `check demo.tsx`"

          for files "binaries/**/*" each
            let output = run valgrind $file check ./demo.tsx --merge-stdout-and-stderr
            let allocated = regexp $output "(?<bytes>[\\d,]+) bytes allocated" extract bytes
            let allocated = replace $allocated "," "" then format_number

            let output = run valgrind --tool=callgrind $file check ./demo.tsx --merge-stdout-and-stderr
            let instructions = regexp $output "Collected : (?<name>\\d+?)\\b" extract name then format_number

            append $to "- `$file`: `$allocated` bytes allocated and `$instructions` instructions\n"

      # final steps

      - name: Move binary
        shell: shell-language {0}
        run: copy target/release/ezno binaries/binary-${{ runner.os }}${{ runner.arch }}-${{ 'general-fixes' }}-last

      - name: Upload current binary
        uses: actions/upload-artifact@v4
        with:
          # TODO TEMP branch
          name: binary-${{ runner.os }}${{ runner.arch }}-${{ 'general-fixes' }}-last
          path: binaries/binary-${{ runner.os }}${{ runner.arch }}-${{ 'general-fixes' }}-last
          overwrite: true
          retention-days: 30

      # - name: Run parsing & stringing (minfied) benchmarks
      #   shell: bash
      #   continue-on-error: true
      #   run: |
      #     CORPUS_URL="https://gist.githubusercontent.com/kaleidawave/6708f604bc403021b56cb54ea50cac62/raw/javascript_files.txt"

      #     curl -s "$CORPUS_URL" | while IFS= read -r URL; do
      #       FILENAME="${URL##*/}"
      #       curl -s "$URL" > $FILENAME
      #       echo "::group::Comparison"
      #       ${{ steps.compilers.outputs.BINARY }} ast-explorer full $FILENAME --check

      #       # hyperfine -i -L compiler ${{ steps.compilers.outputs.BINARIES }} \
      #       #   '{compiler} ast-explorer full $FILENAME --check'
            
      #       echo "::endgroup::"
      #     done
