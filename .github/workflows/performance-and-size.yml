name: Performance and size

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  run-benchmarks:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - uses: brndnmtthws/rust-action-cargo-binstall@v1
        with:
          packages: hyperfine

      # For displaying line count in file
      - name: Download scc
        run: |
          mkdir scc
          cd scc
          gh release download v3.1.0 -R boyter/scc -p '*Linux_x86_64.tar.gz' -O scc.tar.gz
          tar -xf scc.tar.gz
          chmod +x scc
          pwd >> $GITHUB_PATH
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Build Ezno
        run: cargo build --release
        env:
          CARGO_PROFILE_RELEASE_DEBUG: true

      - name: Run checker performance
        shell: bash
        run: |
          # Generate a file which contains everything that Ezno currently implements  
          cargo run -p ezno-parser --example code_blocks_to_script ./checker/specification/specification.md ./demo.ts
          echo "::info::Finished file generation"

          LINES_OF_CODE=$(scc -c --no-cocomo -f json demo.ts | jq ".[0].Code")

          echo "### Checking
          \`\`\`shell
          $(hyperfine -i './target/release/ezno check demo.ts')
          \`\`\`" >> $GITHUB_STEP_SUMMARY

          echo "<details>
          <summary>Input</summary>

          \`\`\`ts
          // $LINES_OF_CODE lines of TypeScript generated from specification.md
          // this is not meant to accurately represent a program but instead give an idea for how it scales across all the type checking features
          $(cat ./demo.ts)
          \`\`\`
          </details>
          " >> $GITHUB_STEP_SUMMARY

          echo "::info::Wrote code to summary"
          
          echo "<details>
          <summary>Diagnostics</summary>
          
          \`\`\`
          $(./target/release/ezno check demo.ts --timings --max-diagnostics all 2>&1 || true)
          \`\`\`
          </details>
          " >> $GITHUB_STEP_SUMMARY

      - name: Run parser, minfier/stringer performance
        shell: bash
        run: |
          strings=(
            "https://esm.sh/v128/react-dom@18.2.0/es2022/react-dom.mjs"
            "https://esm.sh/v135/typescript@5.3.3/es2022/typescript.mjs"
          )

          for url in "${strings[@]}"; do
              curl -sS $url > input.js
              echo "--- debug: $url ---"
              cargo run -p ezno-parser --example parse input.js --timings --render-timings
              echo "--- release: $url ---"
              cargo run -p ezno-parser --release --example parse input.js --timings --render-timings

              hyperfine "./target/debug/examples/parse input.js" "./target/release/examples/parse input.js"
          done
