name: Performance and size

on:
  push:
    branches: [main]
  workflow_dispatch:
  #   inputs:
  #     paths: 
  #       default: "[]"
  #       type: string
  #       description: Some binaries to build and compare with

env:
  CARGO_TERM_COLOR: always

jobs:
  temp:
    runs-on: ubuntu-latest
    if: true

    strategy:
      matrix: 
        # ref: ${{ fromJson(inputs.paths) }} 
        ref: [
          "35dbeb145150906ba91ec8582ebb38650f1c7d34",
          "506be8be8b6f1de2423ecab6413b31e3cb0ce58c"
        ]
      fail-fast: true

    steps:
    - uses: actions/checkout@v4
      id: checkout
      with:
        ref: ${{ matrix.ref }}
    - uses: dtolnay/rust-toolchain@stable
    
    - name: Build binary
      run: cargo build --release
      shell: bash

    - uses: actions/upload-artifact@v4
      with:
        # '-${{ steps.get-branch.outputs.branch }}'
        name: binary-${{ runner.os }}${{ runner.arch }}-temp-${{ matrix.ref }}
        path: binaries
        retention-days: 30

  run-benchmarks:
    runs-on: ubuntu-latest
    needs: temp
    if: ${{ always() }}

    env:
      GH_TOKEN: ${{ github.token }}

    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      # TODO abstract
      - name: Download shell-language
        run: |
          mkdir bin
          gh release download -R kaleidawave/experiments assets -p shell-language -D bin
          ls -R .
          chmod +x ./bin/shell-language
          echo "$(pwd)/bin" >> "$GITHUB_PATH"

      - uses: brndnmtthws/rust-action-cargo-binstall@v1
        with:
          packages: hyperfine

      - name: Install valgrind
        id: install-valgrind
        continue-on-error: true
        run: sudo apt-get install valgrind

      - name: Get latest version of demo.tsx
        uses: actions/download-artifact@v4
        id: download-demo-tsx
        with:
          name: specification-${{ github.ref_name }}
      
      - name: Build latest version of demo.tsx
        if: ${{ steps.download-demo-tsx.conclusion == 'failure' }}
        run: |
          cargo run -p ezno-checker-specification \
            --example amalgamate ./checker/specification/specification.md \
            --comment-headers \
            --out demo.tsx

      # get other binaries and last

      - name: Get latest version of binaries
        uses: actions/download-artifact@v4
        id: download-binaries
        with:
          pattern: binary-${{ runner.os }}*
          path: binaries
          merge-multiple: true

      - name: Build latest version of binaries
        if: ${{ steps.download-binaries.conclusion == 'failure' }}
        shell: shell-language {0}
        run: |
          echo run cargo build --release
          copy target/releases/ezno binaries
          copy target/releases/ezno binary-${{ runner.os }}${{ runner.arch }}-general-fixes-last

      - name: Upload current binary
        uses: actions/upload-artifact@v4
        with:
          # TODO temp branch
          name: binary-${{ runner.os }}${{ runner.arch }}-general-fixes-last
          path: binaries/ezno
          overwrite: true
          retention-days: 30

      # start of performance

      - name: Compare checker performance
        shell: shell-language {0}
        run: |
          # Ensure binaries are executable
          ee binaries
          
          let to = env GITHUB_STEP_SUMMARY
          let binaries = files "binaries/*"
          let binaries = replace $binaries "\n" ","

          echo "Found $binaries"

          append $to "### Checking\n"
          let output = run hyperfine -i -L binary $binaries './{binary} check demo.tsx'
          append $to "```shell\n$output\n```"

      - name: Print input
        shell: shell-language {0}
        run: |
          let to = env GITHUB_STEP_SUMMARY
          let content = read ./demo.tsx
          append $to "<details><summary>Input</summary>\n"
          append $to "```tsx\n$content\n```\n</details>"
          
      - name: Print diagnostics and statistics
        id: performance
        continue-on-error: true
        shell: shell-language {0}
        run: |
          let to = env GITHUB_STEP_SUMMARY
          for files "binaries/*" each
            append $to "#### $file: `demo.tsx`"
            let out = run "./$file" check demo.tsx --timings --max-diagnostics all --merge-stdout-and-stderr

            let diagnostics = rbefore $out "---"
            let statistics = rafter $out "---"

            append $to "<details><summary>Diagnostics</summary>\n"
            append $to "```$diagnostics\n```\n</details>"
            append $to "<details><summary>Statistics</summary>\n"
            append $to "```$statistics\n```\n</details>"

      - name: Run checker performance on large file
        shell: shell-language {0}
        run: |
          let demo = read "./demo.tsx"
          let large = repeat $demo 10
          write "./large.tsx" $large

          let to = env GITHUB_STEP_SUMMARY
          for files "binaries/*" each
            append $to "#### $file: `large.tsx`"
            echo "Running $file"
            let out = run "./$file" check large.tsx --timings --merge-stdout-and-stderr

            let statistics = rafter $out "---"
            append $to "<details><summary>Statistics</summary>\n\n```$statistics\n```\n</details>"
            
            let out = run hyperfine -i "./$file" check large.tsx
            append $to "```shell\n$out\n```"

      - name: Valgrind and Callgrind statistics
        shell: shell-language {0}
        if: ${{ steps.install-valgrind.outcome == 'success' }}
        continue-on-error: true
        run: |
          let to = env GITHUB_STEP_SUMMARY
          for files "binaries/*" each
            append $to "#### $file: instructions and memory usage"

            let output = run valgrind $file "./demo.tsx" --check --merge-stdout-and-stderr
            let allocated = regexp $output "(?<bytes>[\\d,]+) bytes allocated" extract bytes
            let allocated = replace $allocated "," ""
            let allocated = format_number $allocated

            let output = run valgrind --tool=callgrind $file "./demo.tsx" --check --merge-stdout-and-stderr
            let instructions = regexp $output "Collected : (?<name>\\d+?)\\b" extract name
            let instructions = format_number $instructions

            append $to "- `$file`: `$allocated` allocated and $instructions` instructions"

      # - name: Run parsing & stringing (minfied) benchmarks
      #   shell: bash
      #   continue-on-error: true
      #   run: |
      #     CORPUS_URL="https://gist.githubusercontent.com/kaleidawave/6708f604bc403021b56cb54ea50cac62/raw/javascript_files.txt"

      #     curl -s "$CORPUS_URL" | while IFS= read -r URL; do
      #       FILENAME="${URL##*/}"
      #       curl -s "$URL" > $FILENAME
      #       echo "::group::Comparison"
      #       ${{ steps.compilers.outputs.BINARY }} ast-explorer full $FILENAME --check

      #       # hyperfine -i -L compiler ${{ steps.compilers.outputs.BINARIES }} \
      #       #   '{compiler} ast-explorer full $FILENAME --check'
            
      #       echo "::endgroup::"
      #     done
